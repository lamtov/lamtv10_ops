input {

    beats {
        port => 5047
    }

}

filter {

    grok {
              # Do multiline matching as the above mutliline filter may add newlines
              # to the log messages.
              # TODO move the LOGLEVELs into a proper grok pattern.
                match => { "message" => ["(?m)^%{TIMESTAMP_ISO8601:logDate}%{SPACE}(%{TIMESTAMP_ISO8601}%{SPACE})?%{NUMBER:pid}?%{SPACE}?(?<logLevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR) \[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logMessage}?", "^%{COMMONAPACHELOG}","^%{HTTPD_COMBINEDLOG}"] }
                add_field => { "received_at" => "%{@timestamp}" }

            }

        date {
                match => [ "logDate", "YYYY-MM-dd HH:mm:ss.SSS", "YYYY-MM-dd HH:mm:ss.SSSSSS"]
        }

    if "nova_compute" in [tags] {

                mutate {
              gsub => ['logMessage',"\"",""]
        }
            grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] Instance %{NOTSPACE:instance_id} %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] \[instance: %{NOTSPACE:instance_id}\] %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "nova"]
                    add_tag => ["apimetrics"]
            }

    }

    if "neutron_dhcp_agent" in [tags] {
        if [module] == "neutron.agent.dhcp.agent" {
            mutate {
                gsub => ['logMessage',"\"",""]
            }
            grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "neutron"]
                    add_tag => ["apimetrics"]
            }
        }

    }
    if "neutron_openvswitch_agent" in [tags] {
        mutate {
            gsub => ['logMessage',"\"",""]
        }
        grok {
                match => { "logMessage" => ["\[req\-%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] Port %{NOTSPACE:port_id} %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                add_field => ["api", "neutron"]
                add_tag => ["apimetrics"]
        }

    }


    if "neutron_metadata_agent" in [tags] {


        mutate {
            gsub => ['logMessage',"\"",""]
        }
        grok {
                match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                add_field => ["api", "neutron"]
                add_tag => ["apimetrics"]
        }

    }






}


output {

    elasticsearch {
        hosts => ["10.255.26.163:9200","10.255.26.164:9200","10.255.26.165:9200"]
        sniffing => true
        manage_template => false
        index => "nfv-nfvi-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
    }


    stdout { codec => rubydebug{} }

}
