
input {
        beats {
                port => 5044
        }
}



filter {


        if "syslog" in [tags] {


            grok {
              # Do multiline matching as the above mutliline filter may add newlines
              # to the log messages.
              # TODO move the LOGLEVELs into a proper grok pattern.
                match => { "message" => ["(?m)^%{SYSLOGTIMESTAMP:logDate} %{SYSLOGHOST:hostname} %{NOTSPACE:module}\: %{GREEDYDATA:data}","^%{SYSLOGBASE}","^%{GREEDYDATA:data}"]}
                add_field => { "received_at" => "%{@timestamp}" }

            }

        #date {
        #        match => [ "logDate", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
        #}
    }




        if "oslomessage" in [tags] {


            grok {
              # Do multiline matching as the above mutliline filter may add newlines
              # to the log messages.
              # TODO move the LOGLEVELs into a proper grok pattern.
                match => { "message" => ["(?m)^%{TIMESTAMP_ISO8601:logDate}%{SPACE}(%{TIMESTAMP_ISO8601}%{SPACE})?%{NUMBER:pid}?%{SPACE}?(?<logLevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR) \[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:logMessage}?", "^%{COMMONAPACHELOG}","^%{HTTPD_COMBINEDLOG}"] }
                add_field => { "received_at" => "%{@timestamp}" }

            }

        date {
                match => [ "logDate", "YYYY-MM-dd HH:mm:ss.SSS", "YYYY-MM-dd HH:mm:ss.SSSSSS"]
        }

        if "keystone_access" in [tags]{
                mutate {
                    gsub => ['message',"\"",""]
               }
               grok {
                  match => { "message" => "%{NOTSPACE:host_ip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{GREEDYDATA:data}" }
                  add_field => ["api", "keystone"]
                  add_tag => ["apimetrics"]
               }

        } else if "keystone_api" in [tags] {
               mutate {
                    gsub => ['logMessage',"\"",""]
               }
               grok {
                  match => { "logMessage" => "\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}" }
                  add_field => ["api", "keystone"]
                  add_tag => ["apimetrics"]
               }
            } else if "nova" in [tags] {




               if [module] == "nova.osapi_compute.wsgi.server" {
                 mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"] }
                    add_field => ["api", "nova"]
                    add_tag => ["apimetrics"]
                 }
               } else if [module] == "nova.compute.api" {
                mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:requestid} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] \[instance: %{NOTSPACE:instance_id}\] %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "nova"]
                    add_tag => ["apimetrics"]
                 }
               } else if [module] == "nova.metadata.wsgi.server" {
                mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => ["\[%{GREEDYDATA:request_id}\] %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "metadata"]
                    add_tag => ["apimetrics"]
                 }
               } else if [module] == "nova.conductor.manager" {
                 mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] \[instance: %{NOTSPACE:instance_id}\] %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "nova_conductor"]
                    add_tag => ["apimetrics"]
                 }
               } else if [module] == "nova.conductor.tasks.migrate" {
                 mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] \[instance: %{NOTSPACE:instance_id}\] %{GREEDYDATA:data}" ,"\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                    add_field => ["api", "nova_conductor"]
                    add_tag => ["apimetrics"]
                 }
               } else {
               mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                  match => { "logMessage" => ["\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}","\[%{GREEDYDATA:request_id}\] %{GREEDYDATA:data}"]}
                  add_field => ["api", "nova"]
                  add_tag => ["apimetrics"]
                  }
               }

            } else if "neutron_server" in [tags] {
               if [module] == "neutron.wsgi" {
                   mutate {
                        gsub => ['logMessage',"\"",""]
                   }
                   grok {
                      match => { "logMessage" => "\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response}  len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" }
                      add_field => ["api", "neutron"]
                      add_tag => ["apimetrics"]
                   }

               }
            } else if "glance_api" in [tags] {
               if [module] == "eventlet.wsgi.server" {
                 mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => "\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{NOTSPACE:requesterip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
                    add_field => ["api", "glance"]
                    add_tag => ["apimetrics"]
                 }
               }
        } else if "cinder" in [tags] {

                 mutate {
                      gsub => ['logMessage',"\"",""]
                 }
                 grok {
                    match => { "logMessage" => "\[req\-%{NOTSPACE:request_id} %{NOTSPACE:user_id} %{NOTSPACE:tenant} %{NOTSPACE:unknown1} %{NOTSPACE:unknown2} %{NOTSPACE:unknown3}\] %{GREEDYDATA:data}" }
                    add_field => ["api", "cinder"]
                    add_tag => ["apimetrics"]
                 }

        } else if "horizon_access" in [tags] {

                 mutate {
                      gsub => ['message',"\"",""]
                 }
                 grok {
                    match => { "message" => "%{NOTSPACE:host_ip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{GREEDYDATA:data}" }
                    add_field => ["api", "horizon"]
                    add_tag => ["apimetrics"]
                 }
            }

    }





}





output {

        #if [logLevel] != "INFO" {

            elasticsearch {
                    hosts => ["10.255.26.163:9200","10.255.26.164:9200","10.255.26.165:9200"]
                    sniffing => true
                    manage_template => false
                    index => "nfv-openstack-%{+YYYY.MM.dd}"
                    document_type => "%{[@metadata][type]}"
            }

            stdout { codec => rubydebug{} }
       # }
}
